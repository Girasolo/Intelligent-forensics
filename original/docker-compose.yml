version: '3'
services:
  #to add a new router copy and paste this configuration. Define its ip address and assign a network consistenlty with the architecture required
  fluentd:
    build: 
      context: ./fluentd
      dockerfile: Dockerfile_fluentd
    privileged: true
    #the container as first instruction executes the entrypoint (since the image doesn't support bash it's used sh)
    entrypoint: sh -c "/ep_fluentd.sh"
    #shared-volumes between fluentd and the host
    volumes:
      - ./fluentd/conf/fluent.conf:/fluentd/etc/fluent.conf 
      - ./fluentd/shared-volume:/shared-volume
      - ./fluentd/output:/fluentd/output/
    #hostPort:containerPort
    #indicates a connection between these 2 ports but it works also without this block
    ports:
      - "24224:24224"
      - "24224:24224/udp"
      - "5140/tcp"
    command: 
      - "/bin/sleep"
      - "infinity"
    networks:
      default:
        ipv4_address: 172.16.10.2
  
  
  router1:
    hostname: router1
    build: 
      context: ./router
      dockerfile: Dockerfile_router
    #the container as first instruction executes the entrypoint
    entrypoint: entrypoints/ep_router1.sh
    #set the network and system priviledges high to make it possible to add static route and set the flag for forwarding to 1. Done for all the containers in this primal phase.
    cap_add:
      - NET_ADMIN
    privileged: true
    #shared-volumes between fluentd and the host
    volumes:
      - ./fluentd/shared-volume:/shared-volume
    #Started after fluentd (that should collect all the logs)
    depends_on:
      - fluentd
    #links establishes a link to the fluentd service enabling communication with that container
    links:
      - fluentd
    #set as logging driver fluentd (to check if it's actually needed)
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 172.16.10.2:24224
        tag: router1
        #makes the execution non-blocking
        fluentd-async: 'true'
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"
    networks:
      default:
        ipv4_address: 172.16.10.10
      clientSide:
        ipv4_address: 172.16.1.2
      internalNet:
        ipv4_address: 172.16.2.2
    

  router2:
    hostname: router2
    build: 
      context: ./router
      dockerfile: Dockerfile_router
    #the container as first instruction executes the entrypoint
    entrypoint: entrypoints/ep_router2.sh
    #set the network and system priviledges high to make it possible to add static route and set the flag for forwarding to 1. Done for all the containers in this primal phase.
    cap_add:
      - NET_ADMIN
    privileged: true
    #shared-volumes between fluentd and the host
    volumes:
      - ./fluentd/shared-volume:/shared-volume
    #Started after fluentd (that should collect all the logs)
    depends_on:
      - fluentd
    #links establishes a link to the fluentd service enabling communication with that container
    links:
      - fluentd
    #set as logging driver fluentd (to check if it's actually needed)
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 172.16.10.2:24224
        tag: router2
        #makes the execution non-blocking
        fluentd-async: 'true'
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"
    networks:
      internalNet:
        ipv4_address: 172.16.2.3
      serverSide:
        ipv4_address: 172.16.0.2

  router3:
    hostname: router3
    build: 
      context: ./router
      dockerfile: Dockerfile_router
    #the container as first instruction executes the entrypoint
    #entrypoint: entrypoints/ep_router1.sh
    #set the network and system priviledges high to make it possible to add static route and set the flag for forwarding to 1. Done for all the containers in this primal phase.
    cap_add:
      - NET_ADMIN
    privileged: true
    #shared-volumes between fluentd and the host
    volumes:
      - ./fluentd/shared-volume:/shared-volume
    #Started after fluentd (that should collect all the logs)
    depends_on:
      - fluentd
    #links establishes a link to the fluentd service enabling communication with that container
    links:
      - fluentd
    #set as logging driver fluentd (to check if it's actually needed)
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 172.16.10.2:24224
        tag: router1
        #makes the execution non-blocking
        fluentd-async: 'true'
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"
    networks:
      default:
        ipv4_address: 172.16.10.20
      clientSide:
        ipv4_address: 172.16.1.20
      internalNet:
        ipv4_address: 172.16.2.20

  client:
    build: 
      context: ./client
      dockerfile: Dockerfile_client
    #privedges for network needed to add a new ip route
    cap_add:
      - NET_ADMIN
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"  
    networks:
      clientSide:
        ipv4_address: 172.16.1.10

  temp:
    build: 
      context: ./temp
      dockerfile: Dockerfile_temp
    cap_add:
      - NET_ADMIN
    #privileged: true
    #shared-volumes between fluentd and the host
    volumes:
      - ./fluentd/shared-volume:/shared-volume
    depends_on:
      - fluentd
    #links establishes a link to the fluentd service enabling communication with that container
    #Started after fluentd (that should collect all the logs)
    links:
      - fluentd
    #set as logging driver fluentd (to check if it's actually needed)
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 172.16.10.2:24224
        tag: temp_server
        #makes the execution non-blocking
        fluentd-async: 'true'
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"  
    networks:
      serverSide:
        ipv4_address: 172.16.0.11

  server_:
    image: ubuntu:22.04
    #put the container in a loop in order to access it with bash
    command:
      #- "ip route add 172.16.1.0/24 via 172.16.0.2" 
      - "/bin/sleep"
      - "infinity"
    cap_add:
      - NET_ADMIN
    #privileged: true
    networks:
      serverSide:
        ipv4_address: 172.16.0.10
  
  

networks:
  clientSide:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.1.0/24
  serverSide:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.0.0/24
  internalNet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.2.0/24
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.10.0/24
